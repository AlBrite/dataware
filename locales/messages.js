export const default_messages = {
    accepted: "The :attribute must be accepted.",
    date: "The field must be a valid date.",
    url: "The field must be a valid URL.",
    ip: "The field must be a valid IP address.",
    uuid: "The field must be a valid UUID.",
    integer: "The field must be an integer.",
    alpha_spaces: "The field may only contain letters and spaces.",
    timezone: "The field must be a valid timezone.",
    credit_card: "The field must be a valid credit card number.",
    phone: "The field must be a valid phone number.",
    contains: "The field must contain :value.",
    not_contains: "The field must not contain :value.",
    min: {
        numeric: "The value must be at least :min.",
        string: "The length must be at least :min characters.",
        array: "The array must have at least :min items.",
        file: "The file size must be at least :min bytes.",
        files: "The files sizes must be at least :min bytes.",
    },
    unique: "The value must be unique.",
    exists: "The value must exist in the dataset.",
    max: {
        numeric: "The value must not be greater than :max.",
        string: "The length must not be greater than :max characters.",
        array: "The array must not have more than :max items.",
        file: "The file size must not exceed :max bytes.",
        files: "The files sizes must not exceed :max bytes.",
    },
    image: "The :attribute must be an image.",
    video: "The :attribute must be an video.",
    audio: "The :attribute must be an audio.",
    digits: "The :attribute must be :digits digits.",
    file: "The :attribute must be a file.",
    files: "The :attribute expects at least a file to be selected",
    filled: "The :attribute field must have a value.",
    mimes: "The :attribute must be a file of type: :values.",
    mimetypes: "The :attribute must be a file of type: :values.",
    gt: {
        numeric: "The value must be greater than :gt.",
        string: "The length must be greater than :gt characters.",
        array: "The array must have more than :gt items.",
        file: "The file size must be greater than :gt bytes.",
        files: "The files sizes must be greater than :gt bytes.",
    },
    lt: {
        numeric: "The value must be less than :lt.",
        string: "The length must be less than :lt characters.",
        array: "The array must have fewer than :lt items.",
        file: "The file size must be less than :lt bytes.",
        files: "The files sizes must be less than :lt bytes.",
    },
    gte: {
        numeric: "The value must be greater than or equal to :gte.",
        string: "The length must be greater than or equal to :gte characters.",
        array: "The array must have at least :gte items.",
        file: "The file size must be greater than or equal to :gte bytes.",
        files: "The files sizes must be greater than or equal to :gte bytes.",
    },
    lte: {
        numeric: "The value must be less than or equal to :lte.",
        string: "The length must be less than or equal to :lte characters.",
        array: "The array must have at most :lte items.",
        file: "The file size must be less than or equal to :lte bytes.",
        files: "The files sizes must be less than or equal to :lte bytes.",
    },
    alpha: "The field may only contain alphabets",
    alpha_: "The field may only contain letters and underscores.",
    alpha_dash:
        "The field may only contain letters, numbers, dashes, and underscores.",
    alpha_num: "The field may only contain letters and numbers.",
    boolean: "The field must be a boolean value.",
    confirmed: "The field confirmation does not match.",
    between: {
        numeric: "The value must be between :min and :max.",
        string: "The length must be between :min and :max characters.",
        array: "The array must have between :min and :max items.",
        file: "The file size must be between :min and :max bytes.",
        files: "The files sizes must be between :min and :max bytes.",
    },
    password: {
        length: "The Password must be at least :length characters.",
        letters: "The Password must contain at least one letter.",
        mixed: "The Password must contain at least one uppercase and one lowercase letter.",
        numbers: "The Password must contain at least one number.",
        symbols: "The Password must contain at least one symbol.",
        uncompromised:
            "The given Password has appeared in a data leak. Please choose a different :attribute.",
    },
    email: "The field must be a valid email address.",
    in_array: "The field value must be one of the following: :values.",
    in: "The field value must be one of the following: :values.",
    regex: "The field format is invalid.",
    same: "The field must match the :other field.",
    ends_with: "The field must end with one of the following: :values.",
    starts_with:
        "The field must start with one of the following: :values.",
    not_in: "The field value must not be one of the following: :values.",
    required_if: "The field is required when :other is :value.",
    required: "The field is required.",
    uppercase: "The field must be uppercase letters only.",
    lowercase: "The field must be lowercase letters only.",
    url: "The field must be a valid URL.",
    uuid: "The field must be a valid UUID.",
    range: "The value must be between :min and :max.",
    multiple_of: "The value must be a multiple of :number.",
    active_url: "The :attribute is not a valid URL.",
    numeric: "The :attribute must be a number.",
    pattern: "Expected pattern is :pattern",
    required_unless:
        "The :attribute field is required unless :other is in :values.",
    required_with:
        "The :attribute field is required when :values is present.",
    required_with_all:
        "The :attribute field is required when :values are present.",
    required_without:
        "The :attribute field is required when :values is not present.",
    required_without_all:
        "The :attribute field is required when none of :values are present.",
    after: 'The :attribute must be a date after :date.',
    before: 'The :attribute must be a date before :date.',
};